from unittest import TestCase, main
from src.mux8way16 import Mux8Way16
from tests.base_clock import TestBaseClock


class TestMux8Way(TestBaseClock):

    def test(self):

        gate = Mux8Way16()

        patterns = (
            #             ----- input -----                    ----- output -----
            #    a           b          c          d
            #    e           f          g          h         sel         out
            (((0,) * 16, (0,) * 16, (0,) * 16, (0,) * 16,
              (0,) * 16, (0,) * 16, (0,) * 16, (0,) * 16, 0, 0, 0), (0,) * 16),
            (((0,) * 16, (0,) * 16, (0,) * 16, (0,) * 16,
              (0,) * 16, (0,) * 16, (0,) * 16, (0,) * 16, 0, 0, 1), (0,) * 16),
            (((0,) * 16, (0,) * 16, (0,) * 16, (0,) * 16,
              (0,) * 16, (0,) * 16, (0,) * 16, (0,) * 16, 0, 1, 0), (0,) * 16),
            (((0,) * 16, (0,) * 16, (0,) * 16, (0,) * 16,
              (0,) * 16, (0,) * 16, (0,) * 16, (0,) * 16, 0, 1, 1), (0,) * 16),
            (((0,) * 16, (0,) * 16, (0,) * 16, (0,) * 16,
              (0,) * 16, (0,) * 16, (0,) * 16, (0,) * 16, 1, 0, 0), (0,) * 16),
            (((0,) * 16, (0,) * 16, (0,) * 16, (0,) * 16,
              (0,) * 16, (0,) * 16, (0,) * 16, (0,) * 16, 1, 0, 1), (0,) * 16),
            (((0,) * 16, (0,) * 16, (0,) * 16, (0,) * 16,
              (0,) * 16, (0,) * 16, (0,) * 16, (0,) * 16, 1, 1, 0), (0,) * 16),
            (((0,) * 16, (0,) * 16, (0,) * 16, (0,) * 16,
              (0,) * 16, (0,) * 16, (0,) * 16, (0,) * 16, 1, 1, 1), (0,) * 16),

            (((1,) * 16, (0,) * 16, (0,) * 16, (0,) * 16,
              (0,) * 16, (0,) * 16, (0,) * 16, (0,) * 16, 0, 0, 0), (1,) * 16),
            (((1,) * 16, (0,) * 16, (0,) * 16, (0,) * 16,
              (0,) * 16, (0,) * 16, (0,) * 16, (0,) * 16, 0, 0, 1), (0,) * 16),
            (((1,) * 16, (0,) * 16, (0,) * 16, (0,) * 16,
              (0,) * 16, (0,) * 16, (0,) * 16, (0,) * 16, 0, 1, 0), (0,) * 16),
            (((1,) * 16, (0,) * 16, (0,) * 16, (0,) * 16,
              (0,) * 16, (0,) * 16, (0,) * 16, (0,) * 16, 0, 1, 1), (0,) * 16),
            (((1,) * 16, (0,) * 16, (0,) * 16, (0,) * 16,
              (0,) * 16, (0,) * 16, (0,) * 16, (0,) * 16, 1, 0, 0), (0,) * 16),
            (((1,) * 16, (0,) * 16, (0,) * 16, (0,) * 16,
              (0,) * 16, (0,) * 16, (0,) * 16, (0,) * 16, 1, 0, 1), (0,) * 16),
            (((1,) * 16, (0,) * 16, (0,) * 16, (0,) * 16,
              (0,) * 16, (0,) * 16, (0,) * 16, (0,) * 16, 1, 1, 0), (0,) * 16),
            (((1,) * 16, (0,) * 16, (0,) * 16, (0,) * 16,
              (0,) * 16, (0,) * 16, (0,) * 16, (0,) * 16, 1, 1, 1), (0,) * 16),

            (((0,) * 16, (1,) * 16, (0,) * 16, (0,) * 16,
              (0,) * 16, (0,) * 16, (0,) * 16, (0,) * 16, 0, 0, 0), (0,) * 16),
            (((0,) * 16, (1,) * 16, (0,) * 16, (0,) * 16,
              (0,) * 16, (0,) * 16, (0,) * 16, (0,) * 16, 0, 0, 1), (1,) * 16),
            (((0,) * 16, (1,) * 16, (0,) * 16, (0,) * 16,
              (0,) * 16, (0,) * 16, (0,) * 16, (0,) * 16, 0, 1, 0), (0,) * 16),
            (((0,) * 16, (1,) * 16, (0,) * 16, (0,) * 16,
              (0,) * 16, (0,) * 16, (0,) * 16, (0,) * 16, 0, 1, 1), (0,) * 16),
            (((0,) * 16, (1,) * 16, (0,) * 16, (0,) * 16,
              (0,) * 16, (0,) * 16, (0,) * 16, (0,) * 16, 1, 0, 0), (0,) * 16),
            (((0,) * 16, (1,) * 16, (0,) * 16, (0,) * 16,
              (0,) * 16, (0,) * 16, (0,) * 16, (0,) * 16, 1, 0, 1), (0,) * 16),
            (((0,) * 16, (1,) * 16, (0,) * 16, (0,) * 16,
              (0,) * 16, (0,) * 16, (0,) * 16, (0,) * 16, 1, 1, 0), (0,) * 16),
            (((0,) * 16, (1,) * 16, (0,) * 16, (0,) * 16,
              (0,) * 16, (0,) * 16, (0,) * 16, (0,) * 16, 1, 1, 1), (0,) * 16),

            (((0,) * 16, (0,) * 16, (1,) * 16, (0,) * 16,
              (0,) * 16, (0,) * 16, (0,) * 16, (0,) * 16, 0, 0, 0), (0,) * 16),
            (((0,) * 16, (0,) * 16, (1,) * 16, (0,) * 16,
              (0,) * 16, (0,) * 16, (0,) * 16, (0,) * 16, 0, 0, 1), (0,) * 16),
            (((0,) * 16, (0,) * 16, (1,) * 16, (0,) * 16,
              (0,) * 16, (0,) * 16, (0,) * 16, (0,) * 16, 0, 1, 0), (1,) * 16),
            (((0,) * 16, (0,) * 16, (1,) * 16, (0,) * 16,
              (0,) * 16, (0,) * 16, (0,) * 16, (0,) * 16, 0, 1, 1), (0,) * 16),
            (((0,) * 16, (0,) * 16, (1,) * 16, (0,) * 16,
              (0,) * 16, (0,) * 16, (0,) * 16, (0,) * 16, 1, 0, 0), (0,) * 16),
            (((0,) * 16, (0,) * 16, (1,) * 16, (0,) * 16,
              (0,) * 16, (0,) * 16, (0,) * 16, (0,) * 16, 1, 0, 1), (0,) * 16),
            (((0,) * 16, (0,) * 16, (1,) * 16, (0,) * 16,
              (0,) * 16, (0,) * 16, (0,) * 16, (0,) * 16, 1, 1, 0), (0,) * 16),
            (((0,) * 16, (0,) * 16, (1,) * 16, (0,) * 16,
              (0,) * 16, (0,) * 16, (0,) * 16, (0,) * 16, 1, 1, 1), (0,) * 16),

            (((0,) * 16, (0,) * 16, (0,) * 16, (1,) * 16,
              (0,) * 16, (0,) * 16, (0,) * 16, (0,) * 16, 0, 0, 0), (0,) * 16),
            (((0,) * 16, (0,) * 16, (0,) * 16, (1,) * 16,
              (0,) * 16, (0,) * 16, (0,) * 16, (0,) * 16, 0, 0, 1), (0,) * 16),
            (((0,) * 16, (0,) * 16, (0,) * 16, (1,) * 16,
              (0,) * 16, (0,) * 16, (0,) * 16, (0,) * 16, 0, 1, 0), (0,) * 16),
            (((0,) * 16, (0,) * 16, (0,) * 16, (1,) * 16,
              (0,) * 16, (0,) * 16, (0,) * 16, (0,) * 16, 0, 1, 1), (1,) * 16),
            (((0,) * 16, (0,) * 16, (0,) * 16, (1,) * 16,
              (0,) * 16, (0,) * 16, (0,) * 16, (0,) * 16, 1, 0, 0), (0,) * 16),
            (((0,) * 16, (0,) * 16, (0,) * 16, (1,) * 16,
              (0,) * 16, (0,) * 16, (0,) * 16, (0,) * 16, 1, 0, 1), (0,) * 16),
            (((0,) * 16, (0,) * 16, (0,) * 16, (1,) * 16,
              (0,) * 16, (0,) * 16, (0,) * 16, (0,) * 16, 1, 1, 0), (0,) * 16),
            (((0,) * 16, (0,) * 16, (0,) * 16, (1,) * 16,
              (0,) * 16, (0,) * 16, (0,) * 16, (0,) * 16, 1, 1, 1), (0,) * 16),

            (((1, 1, 1, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0),
              (0,) * 16, (0,) * 16, (1,) * 16,
              (0,) * 16, (0,) * 16, (0,) * 16, (0,) * 16, 0, 0, 0),
             (1, 1, 1, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0)),
        )

        self.exec(gate, patterns)
